// Date: 30/05/2014 0:22:19
// Template version 1.1
// Java generated by Techne
// Keep in mind that you still need to fill in some blanks
// - ZeuX

package api.cout970.UltraTech.microparts;

import java.util.HashMap;
import java.util.Map;

import codechicken.lib.vec.Vector3;
import net.minecraft.client.model.ModelBase;
import net.minecraft.client.model.ModelRenderer;
import net.minecraft.entity.Entity;
import net.minecraft.world.World;
import net.minecraftforge.common.util.ForgeDirection;

public class ModelCable extends ModelBase
{
  //fields
    ModelRenderer baseD;
    ModelRenderer DF;
    ModelRenderer DB;
    ModelRenderer DR;
    ModelRenderer DL;
    ModelRenderer cornerF;
    ModelRenderer cornerB;
    ModelRenderer cornerL;
    ModelRenderer cornerR;
  
  public ModelCable()
  {
    textureWidth = 32;
    textureHeight = 32;
    
      baseD = new ModelRenderer(this, 0, 0);
      baseD.addBox(-2F, 0F, -2F, 4, 2, 4);
      baseD.setRotationPoint(0F, 22F, 0F);
      baseD.setTextureSize(32, 32);
      baseD.mirror = true;
      setRotation(baseD, 0F, 0F, 0F);
      DF = new ModelRenderer(this, 0, 6);
      DF.addBox(-2F, 0F, -6F, 4, 2, 4);
      DF.setRotationPoint(0F, 22F, 0F);
      DF.setTextureSize(32, 32);
      DF.mirror = true;
      setRotation(DF, 0F, 0F, 0F);
      DB = new ModelRenderer(this, 0, 12);
      DB.addBox(-2F, 0F, 2F, 4, 2, 4);
      DB.setRotationPoint(0F, 22F, 0F);
      DB.setTextureSize(32, 32);
      DB.mirror = true;
      setRotation(DB, 0F, 0F, 0F);
      DR = new ModelRenderer(this, 0, 18);
      DR.addBox(-6F, 0F, -2F, 4, 2, 4);
      DR.setRotationPoint(0F, 22F, 0F);
      DR.setTextureSize(32, 32);
      DR.mirror = true;
      setRotation(DR, 0F, 0F, 0F);
      DL = new ModelRenderer(this, 0, 24);
      DL.addBox(2F, 0F, -2F, 4, 2, 4);
      DL.setRotationPoint(0F, 22F, 0F);
      DL.setTextureSize(32, 32);
      DL.mirror = true;
      setRotation(DL, 0F, 0F, 0F);
      cornerF = new ModelRenderer(this, 16, 0);
      cornerF.addBox(-2F, 0F, -8F, 4, 2, 2);
      cornerF.setRotationPoint(0F, 22F, 0F);
      cornerF.setTextureSize(32, 32);
      cornerF.mirror = true;
      setRotation(cornerF, 0F, 0F, 0F);
      cornerB = new ModelRenderer(this, 16, 4);
      cornerB.addBox(-2F, 0F, 6F, 4, 2, 2);
      cornerB.setRotationPoint(0F, 22F, 0F);
      cornerB.setTextureSize(32, 32);
      cornerB.mirror = true;
      setRotation(cornerB, 0F, 0F, 0F);
      cornerL = new ModelRenderer(this, 16, 8);
      cornerL.addBox(6F, 0F, -2F, 2, 2, 4);
      cornerL.setRotationPoint(0F, 22F, 0F);
      cornerL.setTextureSize(32, 32);
      cornerL.mirror = true;
      setRotation(cornerL, 0F, 0F, 0F);
      cornerR = new ModelRenderer(this, 16, 14);
      cornerR.addBox(-8F, 0F, -2F, 2, 2, 4);
      cornerR.setRotationPoint(0F, 22F, 0F);
      cornerR.setTextureSize(32, 32);
      cornerR.mirror = true;
      setRotation(cornerR, 0F, 0F, 0F);
  }
  
  public void render(Entity entity, float f, float f1, float f2, float f3, float f4, float f5)
  {
    super.render(entity, f, f1, f2, f3, f4, f5);
    setRotationAngles(f, f1, f2, f3, f4, f5, entity);
    baseD.render(f5);
    DF.render(f5);
    DB.render(f5);
    DR.render(f5);
    DL.render(f5);
    cornerF.render(f5);
    cornerB.render(f5);
    cornerL.render(f5);
    cornerR.render(f5);
  }
  
  private void setRotation(ModelRenderer model, float x, float y, float z)
  {
    model.rotateAngleX = x;
    model.rotateAngleY = y;
    model.rotateAngleZ = z;
  }
  
  public void setRotationAngles(float f, float f1, float f2, float f3, float f4, float f5, Entity t)
  {
    super.setRotationAngles(f, f1, f2, f3, f4, f5, t);
  }

public void render(MicroCablePlane mc, Vector3 pos, float f5) {
	baseD.render(f5);
	mc.updateConnections();
	Map<ForgeDirection, Boolean> m = mc.conn;
	
    if(m.containsKey(ForgeDirection.NORTH) && m.get(ForgeDirection.NORTH)){
    	DF.render(f5);
    	cornerF.render(f5);
    }
    if(m.containsKey(ForgeDirection.SOUTH) && m.get(ForgeDirection.SOUTH)){
    	DB.render(f5);
    	cornerB.render(f5);
    }
    if(m.containsKey(ForgeDirection.WEST) && m.get(ForgeDirection.WEST)){
    	DL.render(f5);
    	cornerL.render(f5);
    }
    if(m.containsKey(ForgeDirection.EAST) && m.get(ForgeDirection.EAST)){
    	DR.render(f5);
    	cornerR.render(f5);
    }
}

public void renderItem(float f5) {
	baseD.render(f5);
    DF.render(f5);
    DB.render(f5);
    DR.render(f5);
    DL.render(f5);
    cornerF.render(f5);
    cornerB.render(f5);
    cornerL.render(f5);
    cornerR.render(f5);
}


}
